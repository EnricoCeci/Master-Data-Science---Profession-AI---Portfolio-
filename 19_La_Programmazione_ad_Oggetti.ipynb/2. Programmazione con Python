{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNZy2/xqki7f6HExER4jWa+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EnricoCeci/Master-Data-Science---Profession-AI---Portfolio-/blob/main/19_La_Programmazione_ad_Oggetti.ipynb/2.%20Programmazione%20con%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Esercizi con le Classi\n",
        "1. La Circonferenza\n",
        "\n",
        "Definisci una classe per rappresentare una circonferenza che, prendendo in input il raggio, definisca dei metodi per il calcolo di diametro, circonferenza e area. Documenta i metodi utilizzando le Docstring."
      ],
      "metadata": {
        "id": "0TEhslOTZ7br"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Shape:\n",
        "\n",
        "    \"\"\"\n",
        "    Questa classe rappresenta una figura geometrica\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, r):\n",
        "        self.r = r\n",
        "\n",
        "    def diameter(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo del diametro della figura\n",
        "        \"\"\"\n",
        "\n",
        "        return\n",
        "\n",
        "\n",
        "    def area(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo dell'area della figura\n",
        "        \"\"\"\n",
        "\n",
        "        return\n",
        "\n",
        "\n",
        "    def perimeter(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo del perimetro della figura\n",
        "        \"\"\"\n",
        "\n",
        "        return\n",
        "\n",
        "\n",
        "    def __repr__(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Stampiamo area, perimetro e diametro della figura\n",
        "        \"\"\"\n",
        "\n",
        "        info = \"Area del cerchio: %2.f\" % self.area()\n",
        "        info =\"Perimetro del cerchio: %2.f\" % self.perimeter()\n",
        "        info =\"Diametro del cerchio: %2.f\" % self.diameter()\n",
        "        return info\n",
        "\n",
        "\n",
        "class Circle(Shape):\n",
        "\n",
        "    \"\"\"\n",
        "    Questa classe rappresenta un cerchio\n",
        "    \"\"\"\n",
        "\n",
        "    def area(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo dell'area del cerchio\n",
        "        \"\"\"\n",
        "\n",
        "        return float(3.14*self.r**2)\n",
        "\n",
        "\n",
        "    def perimeter(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo del perimetro del triangolo\n",
        "        \"\"\"\n",
        "\n",
        "        return self.r*2*3.14\n",
        "\n",
        "\n",
        "    def diameter(self):\n",
        "\n",
        "        \"\"\"\n",
        "        Calcolo del diametro del cerchio\n",
        "        \"\"\"\n",
        "\n",
        "        return self.r*2\n",
        "\n",
        "circle = Circle(5,)\n",
        "print(\"Area del cerchio: %2.f\" % circle.area())\n",
        "print(\"Perimetro del cerchio: %2.f\" % circle.perimeter())\n",
        "print(\"Diametro del cerchio: %2.f\" % circle.diameter())\n",
        "\n",
        "\n",
        "print(circle)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9XigN8hqdLyk",
        "outputId": "0a6fb23e-ede3-4acd-d0f9-b8b4175ccab3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area del cerchio: 78\n",
            "Perimetro del cerchio: 31\n",
            "Diametro del cerchio: 10\n",
            "Diametro del cerchio: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "OPPURE SENZA FARE CON CLASSE PADRE E FIGLIA"
      ],
      "metadata": {
        "id": "dGMO7ToBdiPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Circle:\n",
        "\n",
        "  def __init__(self, r):                #DEFINIAMO IL COSTRUTTORE\n",
        "\n",
        "    \"\"\"\"\n",
        "    Questa classe rappresenta un cerchio\n",
        "    \"\"\"\n",
        "\n",
        "    self.r = r                           #SALVIAMOLO COME ATTRIBUTO (self._r = r SE ATTRIBUTO PRIVATO)\n",
        "\n",
        "  def diameter(self):\n",
        "\n",
        "    \"\"\"\n",
        "    Calcola il diametro come 2*r\n",
        "    \"\"\"\n",
        "\n",
        "    return 2*self.r\n",
        "\n",
        "  def circumference(self):\n",
        "\n",
        "    \"\"\"\n",
        "    Calcola la circonferenza come 2*pi*r\n",
        "    \"\"\"\n",
        "\n",
        "    return 2*3.14*self.r\n",
        "\n",
        "  def area(self):\n",
        "\n",
        "    \"\"\"\n",
        "    Calcola l'area come pi*r^2\n",
        "    \"\"\"\n",
        "\n",
        "    return 3.14*(self.r**2)\n",
        "\n",
        "\n",
        "circle = Circle(1)\n",
        "print(circle.circumference())\n",
        "print(circle.area())\n",
        "6.28\n",
        "3.14"
      ],
      "metadata": {
        "id": "xp1qowLDdSNm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Deep Training\n",
        "\n",
        "In questa esercitazione imparerai a creare una semplice classe in Python e a usare istanze di questa classe per rappresentare degli oggetti.\n",
        "\n",
        "Definisci una classe chiamata `Rectangle` (Rettangolo) con due attributi: `width` (larghezza) e `height` (altezza). Crea un costruttore (__init__) che inizializza questi attributi all'atto di creazione dell'oggetto. Definisci due metodi: `area` che calcola e restituisce l'area del rettangolo, e `perimeter` che calcola e restituisce il perimetro.\n",
        "\n",
        "Successivamente, nel programma principale, crea due istanze della classe `Rectangle` con dimensioni diverse. Chiama entrambi i metodi su ciascuna istanza e stampa i risultati, indicando chiaramente quale rettangolo stai considerando e i valori calcolati. Infine, stampa anche gli attributi `width` e `height` di ciascun oggetto.\n",
        "\n",
        "Lo scopo è di capire come si crea una classe, come si istanzia un oggetto e come si accede agli attributi e metodi di una istanza.\n"
      ],
      "metadata": {
        "id": "MjP9sAJafG6u"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3° Tentativo -\n",
        "\n",
        "1° blocco codice - mio\n",
        "\n",
        "Risultato: B-"
      ],
      "metadata": {
        "id": "8POW0Xy3CJGh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "  def __init__ (self, width, height):\n",
        "      \"\"\"\n",
        "      Creo il costruttore\n",
        "      \"\"\"\n",
        "      self.width = width\n",
        "      self.height = height\n",
        "\n",
        "\n",
        "  def area(self):\n",
        "      \"\"\"\n",
        "      Area rettangolo\n",
        "      \"\"\"\n",
        "      return float(self.width * self.height)\n",
        "\n",
        "\n",
        "\n",
        "  def perimeter(self):\n",
        "      \"\"\"\n",
        "      Perimetro rettangolo\n",
        "      \"\"\"\n",
        "      return float(2 * (self.width + self.height))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "rectangle1 = Rectangle(2, 4)\n",
        "\n",
        "print(f\"L'area del rectangle1 di base {rectangle1.width} e di altezza {rectangle1.height} è pari a {rectangle1.area()}\")\n",
        "print(f\"Il perimetro del rectangle1 di base {rectangle1.width} e di altezza {rectangle1.height} è pari a {rectangle1.perimeter()}\")\n",
        "print(f\"Attributi rettangolo 1: width = {rectangle1.width}, height = {rectangle1.height}\")\n",
        "\n",
        "\n",
        "rectangle2 = Rectangle(3, 6)\n",
        "\n",
        "print(f\"L'area del rectangle2 di base {rectangle2.width} e di altezza {rectangle2.height} è pari a {rectangle2.area()}\")\n",
        "print(f\"Il perimetro del rectangle2 di base {rectangle2.width} e di altezza {rectangle2.height} è pari a {rectangle2.perimeter()}\")\n",
        "print(f\"Attributi rettangolo 2: width = {rectangle2.width}, height = {rectangle2.height}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7xvUMZSCPGA",
        "outputId": "7a5ea044-34ed-4650-bbdb-a6671817fff3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "L'area del rectangle1 di base 2 e di altezza 4 è pari a 8.0\n",
            "Il perimetro del rectangle1 di base 2 e di altezza 4 è pari a 12.0\n",
            "Attributi rettangolo 1: width = 2, height = 4\n",
            "L'area del rectangle2 di base 3 e di altezza 6 è pari a 18.0\n",
            "Il perimetro del rectangle2 di base 3 e di altezza 6 è pari a 18.0\n",
            "Attributi rettangolo 2: width = 3, height = 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3° Tentativo -\n",
        "\n",
        "2° blocco codice - Feedback\n",
        "\n",
        "Risultato: B-"
      ],
      "metadata": {
        "id": "fNg8cdMzptA1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "    def __init__(self, width, height):\n",
        "        \"\"\"\n",
        "        Creo il costruttore\n",
        "        \"\"\"\n",
        "        # Nota: i nomi degli attributi consigliati sono 'base' e 'altezza' come da traccia,\n",
        "        # qui usi 'width' e 'height' che sono chiaramente comprensibili, ma meglio uniformarsi.\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        \"\"\"\n",
        "        Area rettangolo\n",
        "        \"\"\"\n",
        "        # Nota: docstring non indentata correttamente, deve essere dentro il blocco funzione\n",
        "        # Inoltre la conversione in float non è necessaria se input già numerici\n",
        "        return float(self.width * self.height)\n",
        "\n",
        "    def perimeter(self):\n",
        "        \"\"\"\n",
        "        Perimetro rettangolo\n",
        "        \"\"\"\n",
        "        # Come sopra per la docstring e float\n",
        "        return float(2 * (self.width + self.height))\n",
        "\n",
        "\n",
        "# Qui dovresti chiedere all'utente di inserire base e altezza con input() e convertire in int/float,\n",
        "# aspetto richiesto dalla traccia ma mancante.\n",
        "rectangle1 = Rectangle(2, 4)\n",
        "\n",
        "# Suggerisco di usare 'base' invece di 'width' per uniformarsi alle specifiche\n",
        "print(f\"L'area del rectangle1 di base {rectangle1.width} e di altezza {rectangle1.height} è pari a {rectangle1.area()}\")\n",
        "print(f\"Il perimetro del rectangle1 di base {rectangle1.width} e di altezza {rectangle1.height} è pari a {rectangle1.perimeter()}\")\n",
        "print(f\"Attributi rettangolo 1: width = {rectangle1.width}, height = {rectangle1.height}\")\n",
        "\n",
        "rectangle2 = Rectangle(3, 6)\n",
        "\n",
        "print(f\"L'area del rectangle2 di base {rectangle2.width} e di altezza {rectangle2.height} è pari a {rectangle2.area()}\")\n",
        "print(f\"Il perimetro del rectangle2 di base {rectangle2.width} e di altezza {rectangle2.height} è pari a {rectangle2.perimeter()}\")\n",
        "print(f\"Attributi rettangolo 2: width = {rectangle2.width}, height = {rectangle2.height}\")\n",
        "\n",
        "# Suggerimento: potresti definire una funzione per stampare info per evitare ripetizioni\n",
        "# Il codice mostra una buona comprensione dei concetti base di classi, metodi e self."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1YXMyFuE58x",
        "outputId": "fd94b15f-0f0f-44fb-c3f3-d7cc5cca5d07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "L'area del rectangle1 di base 2 e di altezza 4 è pari a 8.0\n",
            "Il perimetro del rectangle1 di base 2 e di altezza 4 è pari a 12.0\n",
            "Attributi rettangolo 1: width = 2, height = 4\n",
            "L'area del rectangle2 di base 3 e di altezza 6 è pari a 18.0\n",
            "Il perimetro del rectangle2 di base 3 e di altezza 6 è pari a 18.0\n",
            "Attributi rettangolo 2: width = 3, height = 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Deep Training\n",
        "\n",
        "In questa esercitazione creerai una semplice classe chiamata Rectangle (rettangolo) che rappresenta una figura geometrica con attributi base e altezza. La classe dovrà includere un metodo per calcolare l'area e un metodo per calcolare il perimetro.\n",
        "\n",
        "Dovrai:\n",
        "1. Definire la classe Rectangle con il costruttore __init__ che inizializza gli attributi base e altezza.\n",
        "2. Implementare il metodo area che restituisce l'area del rettangolo (base * altezza).\n",
        "3. Implementare il metodo perimetro che restituisce il perimetro del rettangolo (2 * (base + altezza)).\n",
        "4. Creare un'istanza della classe Rectangle passando i valori di base e altezza forniti in input.\n",
        "5. Stampare l'area e il perimetro calcolati utilizzando i metodi dell'oggetto creato.\n",
        "\n",
        "Ricorda che per definire i metodi dentro la classe devi sempre includere il parametro self come primo parametro, che rappresenta l'istanza corrente su cui agire.\n",
        "\n",
        "Usa la funzione print() per mostrare i risultati formattandoli in modo chiaro, ad esempio:\n",
        "Area: VALORE\n",
        "Perimetro: VALORE\n",
        "\n",
        "Non dovrai usare ancora concetti avanzati come ereditarietà o metodi speciali, concentrati solo su classe, attributi, metodi, istanza e self.\n",
        "\n",
        "Esempio di flusso:\n",
        "- Leggi due numeri interi o float da input (base e altezza).\n",
        "- Crea un oggetto Rectangle con questi valori.\n",
        "- Chiama i metodi area e perimetro.\n",
        "- Stampa i risultati.\n",
        "\n",
        "Codice blocco - mio\n",
        "\n",
        "Voto: A"
      ],
      "metadata": {
        "id": "2rrSgdykrMIn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "\n",
        "    def __init__(self, base, altezza):\n",
        "        \"\"\"\n",
        "        creo il costruttore\n",
        "        \"\"\"\n",
        "        self.base = base\n",
        "        self.altezza = altezza\n",
        "\n",
        "    def area(self):\n",
        "        \"\"\"\n",
        "        calcolo area\n",
        "        \"\"\"\n",
        "        return (self.base*self.altezza)\n",
        "\n",
        "\n",
        "    def perimetro(self):\n",
        "        \"\"\"\n",
        "        calcolo perimetro\n",
        "        \"\"\"\n",
        "        return (2*(self.base + self.altezza))\n",
        "\n",
        "rectangle1 = Rectangle(int(input(\"Inserisci la base del rettangolo: \")), int(input(\"Inserisci l'altezza del rettangolo \")))\n",
        "\n",
        "print(f\"L'area e il perimetro del rettangolo di base {rectangle1. base} e altezza {rectangle1.altezza} sono rispettivamente pari a {rectangle1.area()} e {rectangle1.perimetro()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "miqXNwcIsF__",
        "outputId": "95ab2d92-b7c3-4f1f-f027-181d8ba3722a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inserisci la base del rettangolo: 2\n",
            "Inserisci l'altezza del rettangolo 4\n",
            "L'area e il perimetro del rettangolo di base 2 e altezza 4 sono rispettivamente pari a 8 e 12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Deep Training\n",
        "\n",
        "In questa esercitazione ti viene richiesto di creare un piccolo sistema orientato agli oggetti per la gestione di forme geometriche semplici. Dovrai definire alcune classi in Python, utilizzando i concetti di classe, istanza, attributi e metodi, costruttori e ereditarietà che hai già affrontato.\n",
        "\n",
        "1) Definisci una classe base chiamata Shape (forma) che:\n",
        "   - ha un costruttore __init__ che riceve come parametro una tupla di lati (ad esempio, per un quadrato (4, 4, 4, 4)) e un'altezza opzionale (default a 0).\n",
        "   - salva questi valori come attributi privati (con _ prefisso).\n",
        "   - implementa un metodo __repr__ che restituisce una stringa rappresentativa della forma (ad esempio, indicante il tipo di shape e i suoi lati).\n",
        "   - definisce due metodi placeholder area() e perimetro() che non fanno nulla (usa pass).\n",
        "\n",
        "2) Crea due classi figlie che ereditano da Shape:\n",
        "   - Triangle: deve ricevere nel costruttore (che chiama quello della superclasse) i 3 lati e l'altezza.\n",
        "     Implementa i metodi area() (calcolo base * altezza / 2, con base = primo lato) e perimetro() (somma dei lati).\n",
        "   - Square: deve ricevere solo il lato (rivolto 4 volte) nel costruttore e chiamare il costruttore di Shape con i lati corretti.\n",
        "     Implementa il metodo perimetro() (4 * lato) e area() (lato * lato).\n",
        "\n",
        "3) Nel main del programma:\n",
        "   - Crea un'istanza di Triangle con lati (3, 4, 5) e altezza 4.\n",
        "   - Crea un'istanza di Square con lato 5.\n",
        "   - Stampa le rappresentazioni delle istanze (usando print).\n",
        "   - Stampa per ogni oggetto il valore dell'area e del perimetro.\n",
        "\n",
        "Assicurati di seguire le convenzioni di nomenclatura e lo stile che hai visto nei moduli. Ricordati che self è necessario nei metodi di istanza per accedere ad attributi e metodi.\n",
        "\n",
        "Questa esercitazione ti permetterà di consolidare la definizione di classi, uso di costruttori, self, metodi, e l'ereditarietà con override di metodi."
      ],
      "metadata": {
        "id": "PTVcbjEdyKtP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Shape:\n",
        "  def __init__(self, lati, altezza = 0):\n",
        "    self._lati = lati\n",
        "    self._altezza = altezza\n",
        "\n",
        "  def __repr__(self):\n",
        "    return f\"Shape(lati={self._lati}, altezza={self._altezza})\"\n",
        "\n",
        "  def area(self):\n",
        "    pass\n",
        "\n",
        "  def perimeter(self):\n",
        "    pass\n",
        "\n",
        "class Triangolo(Shape):\n",
        "\n",
        "  def __init__(self, lati, altezza):\n",
        "      super().__init__(lati, altezza)\n",
        "\n",
        "\n",
        "  def area(self):\n",
        "        \"\"\"\n",
        "        Calcolo l'area del triangolo\n",
        "        \"\"\"\n",
        "        base = self._lati[0]\n",
        "        return float((base*self._altezza)/2)\n",
        "\n",
        "  def perimeter(self):\n",
        "        \"\"\"\n",
        "        Calcolo il perimetro del triagolo\n",
        "        \"\"\"\n",
        "        return float(sum(self._lati))\n",
        "\n",
        "\n",
        "class Quadrato(Shape):\n",
        "\n",
        "  def __init__(self, lato):\n",
        "      lati = (lato, lato, lato, lato)\n",
        "      super().__init__(lati)\n",
        "\n",
        "\n",
        "  def area(self):\n",
        "      \"\"\"\n",
        "      Calcolo l'area del quadrato\n",
        "      \"\"\"\n",
        "      return float(self._lati[0]**2)\n",
        "\n",
        "  def perimeter(self):\n",
        "      \"\"\"\n",
        "      Calcolo il perimetro del quadrato\n",
        "      \"\"\"\n",
        "      return float(4*self._lati[0])\n",
        "\n",
        "\n",
        "triangolo = Triangolo ((3,4,5),4)\n",
        "\n",
        "print(f\"L'area del triangolo è {triangolo.area()} e il perimetro è pari a {triangolo.perimeter()}\")\n",
        "\n",
        "print(triangolo)  #<-- questo è il print semplice dell'oggetto square regolato con repr\n",
        "\n",
        "quadrato = Quadrato (5)\n",
        "\n",
        "print(f\"L'area del quadrato è {quadrato.area()} e il perimetro è pari a {quadrato.perimeter()}\")\n",
        "\n",
        "print(quadrato)   #<-- questo è il print semplice dell'oggetto square regolato con repr"
      ],
      "metadata": {
        "id": "wVr9QLHY3YlP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c472b54d-3c7d-4553-843d-b81de9c16ae0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "L'area del triangolo è 6.0 e il perimetro è pari a 12.0\n",
            "Shape(lati=(3, 4, 5), altezza=4)\n",
            "L'area del quadrato è 25.0 e il perimetro è pari a 20.0\n",
            "Shape(lati=(5, 5, 5, 5), altezza=0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3Vbg4m5Fo2gM"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}